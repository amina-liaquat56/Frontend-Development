## Syllabus
- ReactJs features (VirtualDOM , ReConciliation)
- Local Environemnt Setup (Create-react-app , vite)
- JSX
- Class Components
- Functional Components
- React Object
- Fragment
- Component Styling
- Conditional rendering
- Lists & keys
- Props : de-structuring,requiring props, proptypes,default props
- State 
- Pure Component
- Memo Component
- HigherOrder Component
- Events : Synthetic Event
- Lifecycle Hooks
- Form
- Http - Axios
- Interceptors
- Routing
- REDUX  (State Management)
- Unit Testing (JEST)
- EsLint

## React Local Setup
1. download Nodejs and install
```
   https://nodejs.org/en/download/
```

2. check if nodejs is installed? (open cmd and run the below command)
```
   node -v 
```

3. check if NPM is installed? (NPM-Node Package Manager)
```
   npm -v    
```
```
   
```
4.  go to the folder where you want to create project(d:/sanjay/react)& run the below command	
	npx create-react-app project1 (npx-node package executer)
	
```
                 
```
5. go to the created project folder(project1) and start your React application
```
   cd project1
```
```
   npm start 
```
```
  
```
6. A new browser window will pop up with your newly created React App! 
```
   open a browser tab and type 'http://localhost:3000/' if browser doesn't open automatically.
```
```
   set PORT=3001 && npm start

React Project with Typescript
=============================
-Create React App supports TypeScript out of the box.
-To create a new project with TypeScript support, run the below command
 npx create-react-app my-app --template typescript
-To add TypeScript to an existing Create-React-App project, install the below things
 npm install --save typescript @types/node @types/react @types/react-dom @types/jest

 

create-react-app
================
-It is a React application boilerplate generator created by Facebook. 
-This CLI tool installs React,ReactDOM & other libraries required for a react project.
-It provides a development environment configured for ease-of-use with minimal setup.
-It creates a frontend build pipeline. Under the hood, it uses Babel and webpack.



NPX
===
-NPX : node package executer. 
-Its a Package runner/executer tool.
-It can execute any package that you want from the npm registry without even installing that package.
 ex: npx create-react-app my-app
 

React app with Vite
===================
-Vite.js is a build tool and development server that is designed to optimize the development experience for modern web applications.
-It includes built-in support for TypeScript, CSS preprocessors.


1. Create a vite project
	npm create vite@latest
		(OR)
	npm create vite@latest my-app -- --template react  
		(OR)
	npm create vite@latest my-app -- --template react-ts
	
2. Go to the crated Project, install , and serve the application
	cd my-app
	npm install
	npm run dev
   
```
```
 
What React is
=============
-React is a JavaScript library for building user interfaces.
-It is an open-source, component based library. 
-It is created & maintained by Facebook.
-React is used to build single page applications.
-React allows us to create reusable UI components.
-ReactJS uses virtual DOM based mechanism to fill in data (views) in HTML DOM. 




React is NOT a framework
========================
-React is a library and not a framework.
-The difference between a library and a framework is that a library only helps 
 us in one aspect whereas a framework helps us in many aspects. 
Let's take an example:
-React is a library because it only takes care of our UI.
-Angular, on the other hand, is a framework because it handles much more than the UI 
 (It handles Dependency Injection, CSS encapsulation, httpClient, Form validation, routing etc.)


	Framework										Library
=========================================================================
-group of libraries to make your work easier	-performs specific, well-defined operations
-provides ready to use tools,standards			-provides reusable functions for our code
 templates for fast application development
-Collection of libraries & APIs					-collection of helper functions,objects
-cann't be easily replaceable 					-can be easily replaceable by another
-angular,vue									-jQuery,ReactJs,lodash,moment
-Hospital with full of doctors					-A doctor who specializes in one 		



		React						Angular
===========================================================
1. Library-2013					 1. Framework-2009
2. Light-weight					 2. Heavy
3. JSX + Javascript				 3. HTML + Typescript
4. Uni-Directional				 4. Two-way
5. Virtual DOM					 5. Regular DOM
6. Axios 				 		 6. HttpClientModule 
7. No 		 					 7. Dependency Injection
8. No							 8. Form Validation
9. extra libraries needed		 9. No additional libraries
10. UI heavy					 10. Functionality Heavy




React Features
==============
-Light weight
-JSX
-Components  (easy to build, easy to extend,reusable,loosly coupled)
-Oneway Data Binding (watchers will not be there for bindings)
-Virtual DOM
-Easy to learn because of its simple Design
-Performance




DOM (Document Object Model)
==========================
-DOM is a tree-like structure representing the HTML of a web page
-Allows JavaScript to interact with and modify the page's content, structure, and style. 

Why virtual DOM?
===============
-Frequent DOM manipulations are expensive and performance heavy. 
-Every time the DOM changes, browser would need to recalculate the CSS, 
 run layout and repaint the web page.
-we need a way to minimize the time it takes to repaint the screen. 
 This is where the Virtual DOM comes in.
-React uses virtual DOM to enhance its performance.

 
What Virtual DOM is
===================
-A virtual DOM is a lightweight JavaScript object which is just a copy of the
 real DOM. 
-It is a node tree that lists the elements, their attributes and content as 
 Objects and their properties.
-Virtual DOM is a JavaScript object that mirrors the structure of the real DOM. 
-A virtual DOM is the DOM where a representation of the UI is kept in memory and synced with the DOM.
-React never reads from real DOM, only writes to it.

Virtual DOM Benefits:
=====================
Improved Performance: By reducing the number of direct DOM manipulations, the Virtual DOM significantly speeds up the update process. 
Optimized Updates: React intelligently determines the most efficient way to update the real DOM, minimizing costly reflows and repaints. 
Simplified Development: The Virtual DOM makes it easier to work with complex UIs by abstracting away the complexities of direct DOM manipulation. 

How does React Work? (Virtual DOM)
====================
Initial Render: When page loads, React creates a virtual DOM tree based on the initial JSX or HTML code.
State Changes: When the application's state changes (user input, data updates), Generates a new Virtual DOM tree based on updated data.
Diffing: React compares the new Virtual DOM with the previous Virtual DOM, It identifies what exactly changed 
Reconciliation: Based on diffing results, React calculates the minimal number of real DOM operations needed.
Real DOM Update: Only the necessary changes are applied to the real DOM, resulting faster updates. 

What is the difference between Shadow DOM and Virtual DOM?
==========================================================
-Shadow DOM is a browser technology for scoping variables and CSS in web components. 
-Virtual DOM is a concept implemented by React on top of browser APIs.

ReactDOM
========
-ReactDOM is the glue between React and the DOM.
-React creates a virtual representation of your User Interface (what we call a Virtual DOM) and then ReactDOM is the library that efficiently updates the DOM based on the Virtual DOM.
-The reason why the Virtual DOM exists is to figure out which parts of the UI need to be updated and then batch these changes together. 
-ReactDOM receives those instructions from React and then efficiently updates the DOM.

Web Browser Workflow
====================
Parsing HTML to construct DOM tree --> Render Tree construction --> Layout of the Render tree -->
 -->painting the render tree.

React Reconciliation 
====================
-Reconciliation is the process through which React updates the DOM.
 (syncing the Virtual DOM to the actual DOM)
-Reconciliation is the mechanism that tracks changes in a component state and renders 
 the updated state to the screen.
-It's a step that happens between the render() function being called and the displaying of elements on the screen. This entire process is called reconciliation.

Stack Reconciler < React-16
================
-Synchronous
-works like a stack
-cann't be interrupted

Fiber Reconciler
================
-Fiber is the new reconciliation engine or re-implementation of core algorithm in React v16.
-React Fiber reconciler makes it possible to divide the work into multiple units of work(incremental rendering).
-It sets the priority of each work, and makes it possible to pause, reuse, and abort the unit of work.
-Fiber is Asynchronous.
-reconciliation and rendering to the DOM weren't separated, and React couldn't pause 
 its traversal to jump to other renders in between. This often resulted in lagging inputs.

-Fiber allows the reconciliation and rendering to the DOM to be split into two separate phases:
 Phase 1: render(processing)
 -----------------------
 -React creates a list of all changes to be rendered in the UI 
 -Once the list is fully computed, React will schedule these changes to be executed in the next phase.
 -React doesn't make any actual changes in this phase.

 Phase 2: Commit
 ----------------
 -React tells the DOM to render the changes that was created in the previous phase.
 -the Reconciliation phase can be interrupted, the Commit phase cannot.

React Project - Folder Structure
================================
node_modules/	:  Provides npm packages to the entire workspace. Workspace-wide node_modules dependencies are visible to all projects.
public/ 		:  Only files inside the `public` folder can be referenced from the HTML
src/			:  Source files for the root-level application project.
.gitignore		:  Specifies intentionally untracked files that Git should ignore.
package.json	:  Configures npm package dependencies that are available to all projects in the workspace. 
package-lock.json : Provides version information for all packages installed into node_modules by the npm client. 
README.md		 : Introductory documentation for the application.

React Project Flow
==================
1. index.html  --> <div id="root"></div> (container to inject component)
2. index.js    --> root = ReactDOM.createRoot(document.getElementById('root'));
				   root.render(<App />)
                   where        what
3. App.js      -->  AppComponent Code

JSX
===
-JSX (JavaScript Syntax Extension)is a special syntax for React that makes it easier to represent the UI.
-JSX is used to describe the structure & content of a react component.
-JSX allows us to add the elements in DOM without using createElement() or appendChild() methods.
-JSX looks similar to HTML but it is not HTML.
-JSX code we write gets transformed into React.createElement().
-JSX is not part of browser. we need a tool(Babel)(a JavaScript compiler) 
 to transform it to valid JavaScript.
-JSX doesn't support void tags.
 <img>  		invalid
 <img></img>    valid
 <img /> 		valid
-Since JSX is closer to JavaScript than to HTML, React DOM uses camelCase property naming convention instead of HTML attribute names.
-ex: class becomes className in JSX, and tabindex becomes tabIndex.

React Without JSX
=================
-Code written with JSX will be converted to use React.createElement(). 
-we don't have to use React,createElement() when we use JSX. 
Syntax : React.createElement(type,[props],[...children])
example: React.createElement(div , {name:'myDiv'},[<p> , <span>])
-The first argument is the type of element we're creating
-The second argument is props object.
-The last argument is the children of that element.

ex:  <div class='test'>This is a div</div>  
-Babel converts the above JSX line to the below code
return React.createElement("div", {
    class: "test"
  }, "This is a div");

React Element
=============
-A React element is a JavaScript object with specific properties and methods that React 
assigns and uses internally. 
-React elements are the instructions for how the browser DOM get created. 
-When we use ReactDOM library React elements are getting changed into DOM elements. 
-However, when we use React Native, React elements are getting changed into native UI elements of Android or iOS.
-We create React elements using a function called createElement(). 
-createElement() method is part of the Top-Level React API, and we use it to create React elements. 
-This method takes three parameters:
	a. The first argument defines type of element to create. (h1/p/div)
	b. The second argument defines properties or attributes of the element.
	c. The third argument represents the element's children, any nodes or simple text that are inserted between the opening and closing tag.
	
const hello = React.createElement(
	"H1",
	{id: "msg", className: "title"},
	"Hello React Element"
);	

-document.createElement() returns a DOM element (for example a div or an h1). 
 Whereas React.createElement() returns an object that represents the DOM element.

Module Systems
==============
1. CommonJS
   module.exports = {member1,member2};
   const member1 = require('Library/file name');
2. ECMASCRIPT
   export member1;
   export default member2;
   import DefaultMember , {Namedmember} from 'file'

imports & exports
=================
-Default import:
  import DefaultMember from 'src/my_lib';
-Named imports:
  import { name1, name2 } from 'src/my_lib';
-Combining a default import with named imports
  import DefaultMember, { name1, name2 } from 'src/my_lib';

 
























